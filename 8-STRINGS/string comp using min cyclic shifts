Minimum String Rotations
A rotation on a string is defined as removing first element and concatenating it at the end.
Given N, and an array of N strings, print the minimum no. of cumulative rotations on the strings 
so as to make all the strings equal.
If this is not possible return -1
Input format
 The first line contains N, the number of strings
 This is followed by N strings
Constraints
 2 <= N <= 104
 3 <= string length <= 100
 All characters are in uppercase
Example Input
4
AABCD
CDAAB
DAABC
AABCD
Output
3
Explanation
 Finally, all the string will become aabcd. First and last strings require no rotations.
 Second string requires 2 rotations
 Last string requires 1 rotation
 Hence total rotations required are 3




solution:

#include<stdio.h>
#include<string.h>
#include<limits.h>

int left(char s[],char lock[]){
    if(strcmp(s,lock)==0)
      return 1;
      
    int n=strlen(s),i;
    char ss[n];
    // char t=s[0];
    for(i=0;i<n-1;i++){
        ss[i]=s[i+1];
    }
    ss[n-1]=s[0];
    ss[n]='\0';
    strcpy(s,ss);
    

return 0;
   
}

int main(){
    int n;
    scanf("%d",&n);
    char s[n][100];
    for(int i=0;i<n;i++)
    {
        scanf("%s",s[i]);
    }
    int count,ans=INT_MAX;
    
    for(int i=0;i<n;i++)
    {
        
        // char temp[100]
        char lock[100];
        strcpy(lock,s[i]);
        // int min=INT_MAX;
        count=0;
        for(int j=0;j<n;j++)
        {
            char temp[100];
            strcpy(temp,s[j]);
            if(j!=i)
            {
                while(!left(temp,lock))
                {
                    count++;
                }
                
            }
        }
        printf("count %d \n",count);
        ans= (ans<count) ? ans : count;
    }
    printf("%d",ans);
}


